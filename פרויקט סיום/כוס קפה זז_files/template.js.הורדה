// Generated by LiveScript 1.3.0
(function(){
  return ldc.register(['icon', 'viewLocals'], function(arg$){
    var icon, viewLocals, asset, config, view, rootView;
    icon = arg$.icon, viewLocals = arg$.viewLocals;
    asset = viewLocals || {};
    config = [
      {
        palette: {
          colors: ['#981a23', '#e15b64', '#f47e60', '#f8b26a', '#abbd81']
        }
      }, {
        palette: {
          colors: ['#15212b', '#204651', '#247074', '#309d8e', '#55c89d', '#8df9a2']
        }
      }, {
        palette: {
          colors: ['#1e2d6d', '#2d65bc', '#10cbce', '#91eecc', '#f4ffdf']
        }
      }, {
        palette: {
          colors: ['#140b34', '#84206b', '#e55c30', '#f6d746']
        }
      }
    ];
    if (!asset) {
      lda.ldcvmgr.toggle('mod-load-failed');
    }
    icon({
      favor: 'icon'
    });
    view = new ldView({
      root: ld$.find(document, '[ld-scope=infopanel]', 0),
      handler: {
        variation: function(arg$){
          var node, idx;
          node = arg$.node, idx = arg$.idx;
          return node.addEventListener('click', function(){
            lda.icon.load(asset.slug, asset.name, {
              size: 200
            }).then(function(){
              return lda.icon.setConfig(config[idx]);
            });
            return rootView.get('editor').classList.add('active');
          });
        },
        editor: function(){},
        toggleEditor: function(arg$){
          var node;
          node = arg$.node;
          return node.addEventListener('click', function(){
            lda.icon.load(asset.slug, asset.name, {
              size: 200
            });
            return rootView.get('editor').classList.add('active');
          });
        },
        sharelink: function(arg$){
          var node;
          node = arg$.node;
          return node.value = window.location.origin + "/icon/" + asset.slug;
        },
        share: function(arg$){
          var node, c;
          node = arg$.node;
          c = new ClipboardJS(node);
          return c.on('success', function(){
            node.classList.add('tip-on');
            return debounce(2000).then(function(){
              return node.classList.remove('tip-on');
            });
          });
        }
      }
    });
    return rootView = new ldView({
      root: document,
      handler: {
        editor: function(){},
        close: function(arg$){
          var node;
          node = arg$.node;
          return node.addEventListener('click', function(){
            return rootView.get('editor').classList.remove('active');
          });
        },
        "search-tag": function(arg$){
          var node, input, btn, go;
          node = arg$.node;
          input = ld$.find(node, 'input', 0);
          btn = ld$.find(node, '.btn', 0);
          go = function(){
            return window.location.href = "/icon/tag/" + input.value;
          };
          btn.addEventListener('click', function(){
            return go();
          });
          return input.addEventListener('keyup', function(e){
            if (e.keyCode === 13) {
              return go();
            }
          });
        }
      }
    });
  });
})();